# description: command line configuration

[calamr_default]
results_dir = ~/Desktop/amr-graph

[cli]
apps = list: ${cli_config_default:apps}, show_config_cli, clear_cli,
  aapp, sapp, capp, papp
cleanups = list: ${cli_config_default:cleanups}, show_config_cli,
  capp_decorator, aapp_decorator, sapp_decorator, papp
cleanup_removes = list: log_cli

[log_cli]
#format = %%(levelname)s:%%(module)s:%%(message)s
default_app_level = warn
loggers = dict: {
  'transformers': 'err',
  'zensols.cli.lib': 'info',
  'zensols.amr.app': 'info',
  'zensols.amr.annotate': 'info',
  'zensols.amr.stash': 'info',
  'zensols.datdesc': 'info',
  'zensols.calamr.app': 'info',
  'zensols.calamr.morph': 'debug',
  'zensols.calamr.score': 'info',
  'zensols.calamr.stash': 'info'}

[multiprocess_log_config]
section = log_cli

[clear_cli]
class_name = zensols.cli.CacheClearer
clearables = tuple: amr_default:clearables, calamr_default:clearables

[import]
config_files = list:
  resource(zensols.util): resources/default.conf,
  resource(zensols.util): resources/cli.conf,
  resource(zensols.util): resources/cli-config.conf

[config_cli]
# missing configuration files allowed
expect = False
#cache_path = path: ${default:data_dir}/app-config.dat

[config_import]
references = list: default, package
sections = list: app_conf_imp

[app_conf_imp]
type = import
config_files = list: 
  ^{config_path}, ^{override},
  resource(zensols.calamr): resources/defaults.conf,
  ^{config_path}, ^{override},
  resource(zensols.calamr): resources/pkg.conf,
  ^{config_path}, ^{override}

[capp]
class_name = zensols.calamr.CorpusApplication
resource = instance: calamr_resource
results_dir = path: ${calamr_default:results_dir}

[capp_decorator]
option_excludes = set: config_factory, doc_parser, anon_doc_stash,
  serialized_factory, doc_graph_factory, doc_graph_aligner, results_dir,
  doc_scorer, result_analyzer
option_overrides = dict: {
  'output_file': {'long_name': 'output', 'short_name': 'o'},
  'output_dir': {'long_name': 'outdir', 'short_name': 'o',
                  'metavar': 'DIR',
                  'default': '${calamr_default:results_dir}'},
  'report_file': {'long_name': 'agg', 'short_name': None,
                   'default': '${calamr_default:results_dir}'},
  'output_format': {'long_name': 'format', 'short_name': 'f'},
  'render_level': {'long_name': 'rendlevel', 'short_name': 'r'},
  'use_cached': {'long_name': 'cached', 'short_name': None},
  'keys': {'metavar': '<STRING|ALL>'}}
mnemonic_overrides = dict: {
  'write_adhoc_corpus': 'mkadhoc',
  'write_keys': 'keys',
  'dump_annotated': 'dump',
  'align_corpus': 'aligncorp',
  'create_mismatch_proxy_corpus': 'miscorp',
  'clear_doc_cache': 'cleardoc'}
mnemonic_excludes = set: get_annotated_summary

[aapp]
class_name = zensols.calamr.AlignmentApplication
resource = instance: calamr_resource

[aapp_decorator]
option_excludes = set: config_factory
option_overrides = dict: {
  'output_dir': {'long_name': 'outdir', 'short_name': 'o',
                  'metavar': 'DIR',
                  'default': '${calamr_default:results_dir}'},
  'output_format': {'long_name': 'format', 'short_name': 'f'},
  'render_level': {'long_name': 'rendlevel', 'short_name': 'r'}}
mnemonic_overrides = dict: {
  'align_file': 'align'}

[sapp]
class_name = zensols.amr.ScorerApplication
log_config = instance: log_cli
doc_factory = instance: amr_feature_doc_factory

[sapp_decorator]
option_excludes = set: config_factory, anon_doc_stash
option_overrides = dict: {
  'input_gold': {'long_name': 'gold'},
  'input_parsed': {'long_name': 'parsed', 'short_name': None},
  'input_file': {'long_name': 'input', 'metavar': '<FILE|DIR>'},
  'output_format': {'long_name': 'format', 'short_name': 'f'},
  'output_dir': {'long_name': 'outdir', 'short_name': 'o',
                  'metavar': 'DIR',
		  'doc': 'the output directory',
                  'default': '${calamr_default:results_dir}'},
  'meta_keys': {'long_name': 'metakeys', 'short_name': None}}
mnemonic_overrides = dict: {'parse_penman': 'penman'}
mnemonic_excludes = set: remove_wiki

[papp]
class_name = zensols.calamr.app._ProtoApplication
resource = instance: calamr_resource
